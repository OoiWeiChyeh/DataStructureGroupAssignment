#include "pizza.h"
#include <fstream>
#include <sstream>
#include <iomanip>
// Function to load pizzas from file (pizza.txt)
void loadPizzas(Pizza pizzas[], int& count) {
    ifstream file("pizza.txt");
    string line;
    count = 0;

    while (getline(file, line) && count < 10) {
        istringstream ss(line);
        string name;
        float small, medium, large, xl;
        getline(ss, name, ',');
        ss >> small >> medium >> large >> xl;
        pizzas[count] = Pizza(name, small, medium, large, xl);
        count++;
    }
    file.close();
}

// Function to display available pizzas
void displayMenu(const Pizza pizzas[], int count) {
    cout << "\n\n=================================== Pizza Menu =================================\n\n";
    cout << left << setw(25) << "[Pizza Name]" << setw(15) << "Small ($)" << setw(15) 
		 << "Medium ($)" << setw(15) << "Large ($)" << setw(15) << "XL ($)" << endl;
    
    cout << "---------------------------------------------------------------------------------------\n";
    for (int i = 0; i < count; i++) {
        cout << setw(3) << i + 1 << "." << left << "[" << setw(16) << pizzas[i].name << "] " 
			 << right << setw(10) << fixed << setprecision(2) << pizzas[i].smallPrice << setw(16) << pizzas[i].mediumPrice 
			 << setw(14) << pizzas[i].largePrice << setw(12) << pizzas[i].extraLargePrice << endl;
    }
}


// Function to handle ordering
void takeOrder(Queue<string>& orderQueue, const Pizza pizzas[], int count) {
    int choice = 0, quantity = 0, size;
    
    while (choice != -1) {
        displayMenu(pizzas, count);
        cout << "Enter the pizza number to order (-1 to finish): ";
        cin >> choice;

		
        if (choice > 0 && choice <= count) {
            orderQueue.enqueue(pizzas[choice - 1].name);
            cout << endl << pizzas[choice - 1].name << " added to your order." << endl;
        } else if (choice != -1) {
            cout << "Invalid selection. Please try again." << endl;
        }
    }
}


//Function to display orders
void displayOrders(const Queue<Order>& orderQueue){
	cout << "\nOrders in Queue:\n";
	cout << left << setw(10) << "Order ID" << setw(20) << "Pizza" << setw(10) 
		 << "Size" << setw(10) << "Qty" << endl; 
	cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
	orderQueue.printQueue();
}

// Function to send orders to kitchen queue
void sendToKitchen(Queue<string>& orderQueue, Queue<string>& kitchenQueue) {
    while (!orderQueue.isEmpty()) {
        kitchenQueue.enqueue(orderQueue.getFront());
        orderQueue.dequeue();
    }
}

// Function to process orders in the kitchen queue
void processQueue(Queue<string>& kitchenQueue) {
    if (kitchenQueue.isEmpty()) {
        cout << "No orders in the kitchen queue." << endl;
    } else {
        string currentPizza = kitchenQueue.getFront();
        cout << "Now preparing: " << currentPizza << endl;
        kitchenQueue.dequeue();
    }
}
